<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_376096_mplc.MPLCWorker</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>This script include handles all background processing work</description>
        <name>MPLCWorker</name>
        <script><![CDATA[/* global Class, global, GlideRecord, gs, sn_cc, sn_ws, GlideScopedEvaluator */
/* eslint no-undef: "error" */
var MPLCWorker = Class.create();
MPLCWorker.prototype = {
    initialize: function (progressID) {
		if (progressID) {
			this.progress_id = progressID;
		} else {
			this.progress_id = new global.AJAXExecutionTracker().getLastRunning();
		}
    },
	
	appHasChanges: function (appSysID, repoConfigSysID, cookie, token) {
		// rest calls to the own instance do not work if happening in an interactive session
		const sm = new sn_ws.RESTMessageV2();
		sm.setRequestHeader('Accept', 'application/json');
		sm.setRequestHeader('Cookie', cookie);
		sm.setRequestHeader('X-Usertoken', token);
		sm.setHttpMethod('get');
		sm.setEndpoint(gs.getProperty('glide.servlet.uri') + 'api/sn_devstudio/vcs/apps/' + appSysID + '/repos/' + repoConfigSysID + '/changes');
		try {
			const response = sm.execute();
			const body = response.getBody();
			gs.info("MKR: success: " + body);
			this._trackerSuccess('Success', JSON.parse(body));
		} catch (e) {
			gs.info("MKR: fail: " + e);
			this._trackerFail('REST Step Failed', { error: e.message });
		}
	},
	
	verifyGitApp: function (aliasGr, repo) {
		const repoConfigGr = new GlideRecord('sys_repo_config');
		repoConfigGr.addQuery('sys_app', repo.app.sys_id);
		repoConfigGr.setLimit(1);
		repoConfigGr.query();
		const repoConfigExists = repoConfigGr.hasNext();
		
		const appGr = new GlideRecord('sys_app');
		appGr.addQuery('sys_id', repo.app.sys_id);
		appGr.setLimit(1);
		appGr.query();
	},
	
	installGitApp: function (aliasGr, repo) {
		const provider = new sn_cc.ConnectionInfoProvider();
		const connInfo = provider.getConnectionInfo(aliasGr.sys_id);
		const extendedAttributes = connInfo && connInfo.getExtendedAttributes();
		if (connInfo && extendedAttributes.type == 'target') {
			const apiKey = connInfo.getCredentialAttribute('api_key');
			const sm = new sn_ws.RESTMessageV2();
			sm.setRequestHeader('Accept', 'application/vnd.github+json');
			sm.setRequestHeader('Authorization', 'Bearer ' + apiKey);

			let baseURL = connInfo.getAttribute('connection_url');
			if (!baseURL.endsWith('/')) {
				baseURL += '/';
			}

			sm.setHttpMethod('post');
			sm.setEndpoint(repo.clone_url);
			
			const request = {
				name: repo.name,
				default_branch_only: true
			};
			
			if (extendedAttributes.github_type == 'organization') {
				request.organization = extendedAttributes.github_name;
			}
			
			sm.setRequestBody(JSON.stringify(request));			
			const response = sm.execute();
			if (response.getStatusCode() == 202) {
				this._runScript('global', 'gs.sleep(5000)');
				
				
				this._trackerSuccess('Succesfully forked');
			} else {
				this._trackerFail('Failed to fork repo (' + response.getStatusCode() + ')');
			}
		} else {
			this._trackerFail('Expected a target connection alias');
		}
	},
	
	_trackerUpdateMessage: function (message) {
		const globalTracker = new global.AJAXExecutionTracker();
		const objs = {
			sysparm_tracker_id: this.worker_id,
			sysparm_message: message
		};
		globalTracker.getParameter = function (n) { return objs[n]; };
		globalTracker.updateMessage();
	},
	
	_trackerIsCancelled: function () {
		const state = {
			PENDING: 0,
			RUNNING: 1,
			SUCCESSFULL: 2,
			FAILED: 3,
			CANCELLED: 4
		};
		
		const trackerGr = new GlideRecord('sys_execution_tracker');
		trackerGr.addQuery('sys_id', this.worker_id);
		trackerGr.addQuery('state', state.CANCELLED);
		trackerGr.setLimit(1);
		trackerGr.query();
		return trackerGr.hasNext();
	},
	
	_trackerUpdatePercentComplete: function (percentage) {
		const globalTracker = new global.AJAXExecutionTracker();
		const objs = {
			sysparm_tracker_id: this.worker_id,
			sysparm_percent_complete: percentage
		};
		globalTracker.getParameter = function (n) { return objs[n]; };
		globalTracker.updatePercentComplete();
	},
	
	_trackerSuccess: function (message, result) {		
		this._updateResult(result);
		
		const globalTracker = new global.AJAXExecutionTracker();
		const objs = {
			sysparm_tracker_id: this.worker_id,
			sysparm_message: message
		};
		globalTracker.getParameter = function (n) { return objs[n]; };
		globalTracker.success();
	},

	_trackerFail: function (message, result) {
		this._updateResult(result);
		
		const globalTracker = new global.AJAXExecutionTracker();
		const objs = {
			sysparm_tracker_id: this.worker_id,
			sysparm_message: message
		};
		globalTracker.getParameter = function (n) { return objs[n]; };
		globalTracker.fail();
	},

	_updateResult: function (result) {
		if (result) {
			const globalTracker = new global.AJAXExecutionTracker();
			const tracker = globalTracker._getTracker(this.worker_id);
			tracker.updateResult(result);
		}
	},
	
	_runScript: function (scope, script, vars) {
		const scriptGr = new GlideRecord('sys_rte_eb_script_operation');
		scriptGr.addQuery('sys_id', '26659daf97fb39503c2d3f56f053af90');
		scriptGr.setLimit(1);
		scriptGr.query();
		if (scriptGr.next()) {
			scriptGr.sys_scope = scope;
			scriptGr.script = script;
			const gse = new GlideScopedEvaluator();
			return gse.evaluateScript(scriptGr, 'script', vars);
		}

		return null;
	},

    type: 'MPLCWorker'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-01-23 10:54:13</sys_created_on>
        <sys_id>9f6c5a5397bff5503c2d3f56f053af45</sys_id>
        <sys_mod_count>38</sys_mod_count>
        <sys_name>MPLCWorker</sys_name>
        <sys_package display_value="Marketplace Client" source="x_376096_mplc">2fe28b4497bf39103c2d3f56f053af4e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Marketplace Client">2fe28b4497bf39103c2d3f56f053af4e</sys_scope>
        <sys_update_name>sys_script_include_9f6c5a5397bff5503c2d3f56f053af45</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-01-25 20:10:14</sys_updated_on>
    </sys_script_include>
</record_update>
