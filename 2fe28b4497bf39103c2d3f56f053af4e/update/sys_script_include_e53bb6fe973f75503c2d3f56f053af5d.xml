<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_376096_mplc.MPLCUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>MPLCUtil</name>
        <script><![CDATA[/* global Class, GlideRecord, sn_cc, sn_ws, gs, x_376096_mplc, GlideStringUtil, XMLDocument2, GlideScriptedHierarchicalWorker */
/* eslint no-undef: "error" */
var MPLCUtil = Class.create();
MPLCUtil.prototype = {
    initialize: function() {
		
    },
	
	appHasChanges: function (appSysID, repoConfigSysID) {
		const cookies = new x_376096_mplc.MPLCWorker()._runScript('global', '(GlideTransaction.get().getRequest().getHeader("Cookie") || "").toString()');
		gs.info(cookies);
		const requiredCookies = ['JSESSIONID', 'glide_user_route', 'glide_session_store', 'BIGipServerpool_' + gs.getProperty('instance_name')];
        const cookieOutput = [];
        cookies.split(';').forEach(cookie => {
			// cookie is still a global-scope String and has a space in the beginning
			cookie = cookie.toString().trim();
			
            const cookieName = cookie.substring(0, cookie.indexOf('='));
            if (requiredCookies.includes(cookieName)) {
				const end = cookie.indexOf(';');
                cookieOutput.push(cookie.substring(0, end == -1 ? cookie.length : end));
            }
        });
		
		const cookie = cookieOutput.join(';');
		const sessionToken = gs.getSession().getSessionToken();
		
		const worker = new GlideScriptedHierarchicalWorker();
		worker.setProgressName('MPLC Application Has Changes');
		worker.setScriptIncludeName('x_376096_mplc.MPLCWorker');
		worker.setScriptIncludeMethod('appHasChanges');
		worker.putMethodArg('appSysID', appSysID);
		worker.putMethodArg('repoConfigSysID', repoConfigSysID);
		worker.putMethodArg('cookie', cookie);
		worker.putMethodArg('sessionToken', sessionToken);
		worker.setBackground(true);
		worker.start();

		const workerID = worker.getProgressID();
		return workerID;
	},
	
	getGitRepos: function (aliasSysID) {
		const result = {
			status: 'error',
			error_message: 'unknown error'
		};
		
		const aliasGr = new GlideRecord('sys_alias');
		aliasGr.addQuery('parent.id', 'x_376096_mplc.GitHub');
		aliasGr.addQuery('sys_id', aliasSysID);
		aliasGr.setLimit(1);
		aliasGr.query();
		if (aliasGr.next()) {
			const provider = new sn_cc.ConnectionInfoProvider();
			const connInfo = provider.getConnectionInfo(aliasGr.sys_id);
			const sourceExtAttrs = connInfo.getExtendedAttributes(); 
			if (sourceExtAttrs.type == 'source') {
				const targetConn = sourceExtAttrs.target && provider.getConnectionInfo(sourceExtAttrs.target);
				const targetExtAttrs = targetConn && targetConn.getExtendedAttributes();
				
				const apiKey = connInfo.getCredentialAttribute('api_key');
				const sm = new sn_ws.RESTMessageV2();
				sm.setRequestHeader('Accept', 'application/vnd.github+json');
				sm.setRequestHeader('Authorization', 'Bearer ' + apiKey);

				let baseURL = connInfo.getAttribute('connection_url');
				if (!baseURL.endsWith('/')) {
					baseURL += '/';
				}
				
				let endpoint = baseURL;
				if (sourceExtAttrs.github_type == 'organization') {
					endpoint += 'orgs';
				} else {
					endpoint += 'users';
				}
				
				endpoint += '/' + sourceExtAttrs.github_name + '/repos';

				sm.setHttpMethod('get');
				sm.setEndpoint(endpoint);
				const response = sm.execute();
				if (response.getStatusCode() == 200) {
					const json = JSON.parse(response.getBody());					
					result.status = 'success';
					result.repositories = [];
					json.forEach(r => {
						const folder = getAppFolder(apiKey, r.url);
						if (!folder) {
							return;
						}
						
						const appFile = getAppFile(apiKey, r.url, folder);
						if (!appFile) {
							return;
						}
						
						const app = getAppMetadata(apiKey, r.url, folder, appFile);
						if (!app) {
							return;
						}
						
						const status = {
							state: 'unknown',
							message: ''
						};
						
						let repoConfig = null;						
						const appGr = new GlideRecord('sys_app');
						appGr.addQuery('sys_id', app.sys_id);
						appGr.setLimit(1);
						appGr.query();
						if (appGr.next()) {
							const configGr = new GlideRecord('sys_repo_config');
							configGr.addQuery('sys_app', appGr.sys_id);
							configGr.setLimit(1);
							configGr.query();
							if (configGr.next()) {
								repoConfig = {
									credential_sys_id: configGr.getValue('credential'),
									current_branch: configGr.current_branch.toString()
								};
								
								if (targetConn) {
									// there is no easy way to check if repo-config is actually a cloned/forked from the source
									// (the specified URL in the repo config must be first transformed GitHub-API compatible)
									// we use a "good-enough" solution instead
									if (configGr.url == r.ssh_url.replace(sourceExtAttrs.github_name, targetExtAttrs.github_name) ||
										configGr.url == r.clone_url.replace(sourceExtAttrs.github_name, targetExtAttrs.github_name) ||
										configGr.url == r.html_url.replace(sourceExtAttrs.github_name, targetExtAttrs.github_name)) {
										if (repoConfig.current_branch == r.default_branch) {
											if (appGr.version != app.version) {
												status.state = 'update_available';
											} else {
												status.state = 'installed';
											}
										} else {
											status.state = 'invalid';
											status.message = 'Branch Missmatch';
										}
									} else {
										status.state = 'invalid';
										status.message = 'Source Missmatch';
									}
								} else {
									status.message = 'Unable to check repo config: No Target for GitHub Source configured';
								}
							} else {
								status.state = 'invalid';
								status.message = 'App not linked to Source Control';
							}
						} else {
							status.state = 'not_installed';
						}
									
						result.repositories.push({
							git: {
								id: r.id,
								name: r.name,
								description: r.description,
								url: r.url,
								default_branch: r.default_branch,
								ssh_url: r.ssh_url,
								forks_url: r.forks_url,
								clone_url: r.clone_url,
								private: r.private,
								html_url: r.html_url,
								has_wiki: r.has_wiki
							},
							app: app,
							repo_config: repoConfig,
							status: status
						});
					});
				} else {
					result.error_message = 'Failed to retrieve repositories!';
				}
			} else {
				result.error_message = 'The given Sys ID is not for a GitHub Source!';
			}
		} else {
			result.error = 'Unknown GitHub Source!';
		}
		
		return result;
		
		function getAppFolder(apiKey, url) {
			const sm = new sn_ws.RESTMessageV2();
			sm.setRequestHeader('Accept', 'application/vnd.github+json');
			sm.setRequestHeader('Authorization', 'Bearer ' + apiKey);
			sm.setHttpMethod('get');
			sm.setEndpoint(url + '/contents/sn_source_control.properties');
			const response = sm.execute();
			if (response.getStatusCode() == 200) {
				const body = JSON.parse(response.getBody());
				if (GlideStringUtil.isBase64(body.content)) {
					const content = gs.base64Decode(body.content);
					const pathMatch = content.match(/^path=(.+)/m);
					if (pathMatch) {
						return pathMatch[1];
					}
				}
			}
			
			return null;
		}
		
		function getAppFile(apiKey, url, folder) {
			const sm = new sn_ws.RESTMessageV2();
			sm.setRequestHeader('Accept', 'application/vnd.github+json');
			sm.setRequestHeader('Authorization', 'Bearer ' + apiKey);
			sm.setHttpMethod('get');
			sm.setEndpoint(url + '/contents/' + folder);
			const response = sm.execute();
			if (response.getStatusCode() == 200) {
				const files = JSON.parse(response.getBody());
				for (let i = 0; i < files.length; i++) {
					const fileName = files[i].name;
					if (fileName.startsWith('sys_app_') && fileName.endsWith('.xml')) {
						return fileName;
					}
				}
			}
			
			return null;
		}
		
		function getAppMetadata(apiKey, url, folder, appFile) {
			const sm = new sn_ws.RESTMessageV2();
			sm.setRequestHeader('Accept', 'application/vnd.github+json');
			sm.setRequestHeader('Authorization', 'Bearer ' + apiKey);
			sm.setHttpMethod('get');
			sm.setEndpoint(url + '/contents/' + folder + '/' + appFile);
			const response = sm.execute();
			if (response.getStatusCode() == 200) {
				const body = JSON.parse(response.getBody());
				if (GlideStringUtil.isBase64(body.content)) {
					const xml = new XMLDocument2();
					xml.parseXML(gs.base64Decode(body.content));
					
					let logo = null;					
					const logoSysID = xml.getNodeText('//sys_app/logo');
					if (logoSysID) {						
						const attContentBlocks = [];
						const docXPath = '//sys_attachment_doc[./sys_attachment="' + logoSysID + '"]';
						for (let attDocNode = xml.getFirstNode(docXPath); attDocNode; attDocNode = xml.getNextNode(attDocNode)) {
							const messageDoc = new XMLDocument2();
							messageDoc.parseXML(attDocNode.toString());
							attContentBlocks.push({
								position: messageDoc.getNodeText('//position'),
								data: messageDoc.getNodeText('//data')
							});
						}
						
						logo = {
							compressed: xml.getNodeText('//sys_attachment[./sys_id="' + logoSysID + '"]/compressed') == 'true',
							content_type: xml.getNodeText('//sys_attachment[./sys_id="' + logoSysID + '"]/content_type'),
							content_base64: attContentBlocks.sort((a, b) => a.position - b.position).map(b => b.data)
						};
					}
					
					return {
						name: xml.getNodeText('//sys_app/name'),
						short_description: xml.getNodeText('//sys_app/short_description'),
						logo: logo,
						version: xml.getNodeText('//sys_app/version'),
						scope: xml.getNodeText('//sys_app/scope'),
						sys_id: xml.getNodeText('//sys_app/sys_id'),
						created: xml.getNodeText('//sys_app/sys_created_on'),
						updated: xml.getNodeText('//sys_app/sys_updated_on'),
						store_url: xml.getNodeText('//sys_app/store_url')
					};
				}
			}
			
			return null;
		}
	},
	
	getGitHubSources: function () {		
		const provider = new sn_cc.ConnectionInfoProvider();
		const gitHubSources = [];
		
		const aliasGr = new GlideRecord('sys_alias');
		aliasGr.addQuery('parent.id', 'x_376096_mplc.GitHub');
		aliasGr.query();
		while (aliasGr.next()) {
			const connInfo = provider.getConnectionInfo(aliasGr.sys_id);
			const extendedAttributes = connInfo.getExtendedAttributes(); 
			if (extendedAttributes.type == 'source') {	
				let status = 'unknown';
				let statusMessage = '';
				
				// check if the target is present and if it is configured properly
				if (provider.getConnectionInfo(extendedAttributes.target)) {
					status = 'ok';
					statusMessage = 'Source properly configured';
				} else {
					statusMessage = 'No target or no target connection configured!';
				}
				
				const sm = new sn_ws.RESTMessageV2();
				sm.setRequestHeader('Accept', 'application/vnd.github+json');
				sm.setRequestHeader('Authorization', 'Bearer ' + connInfo.getCredentialAttribute('api_key'));

				let endpoint = connInfo.getAttribute('connection_url');
				if (!endpoint.endsWith('/')) {
					endpoint += '/';
				}
				
				if (extendedAttributes.github_type == 'organization') {
					endpoint += 'orgs';
				} else {
					endpoint += 'users';
				}
				
				endpoint += '/' + extendedAttributes.github_name;

				sm.setHttpMethod('get');
				sm.setEndpoint(endpoint);
				const response = sm.execute();
				
				let logoURL = '';
				let description = '';
				if (response.getStatusCode() == 200) {
					const json = JSON.parse(response.getBody());
					logoURL = json.avatar_url;
					
					if (extendedAttributes.github_type == 'organization') {
						description = json.description;
					} else {
						description = json.bio;
					}
				} else {
					status = 'unknown';
					description = 'Failed to retrieve description!';
				}				
			
				gitHubSources.push({
					sys_id: aliasGr.getUniqueValue(), 
					name: aliasGr.name.toString(),
					description: description,
					logo_url: logoURL,
					status: status,
					status_message: statusMessage
				});
			}
		}
		
		return gitHubSources;
	},
	
	_runScript: function (scope, script, vars) {
		const scriptGr = new GlideRecord('sys_rte_eb_script_operation');
		scriptGr.addQuery('sys_id', '26659daf97fb39503c2d3f56f053af90');
		scriptGr.setLimit(1);
		scriptGr.query();
		if (scriptGr.next()) {
			scriptGr.sys_scope = scope;
			scriptGr.script = script;
			const gse = new GlideScopedEvaluator();
			return gse.evaluateScript(scriptGr, 'script', vars);
		}

		return null;
	},

    type: 'MPLCUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-01-21 20:59:27</sys_created_on>
        <sys_id>e53bb6fe973f75503c2d3f56f053af5d</sys_id>
        <sys_mod_count>71</sys_mod_count>
        <sys_name>MPLCUtil</sys_name>
        <sys_package display_value="Marketplace Client" source="x_376096_mplc">2fe28b4497bf39103c2d3f56f053af4e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Marketplace Client">2fe28b4497bf39103c2d3f56f053af4e</sys_scope>
        <sys_update_name>sys_script_include_e53bb6fe973f75503c2d3f56f053af5d</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-01-29 10:33:10</sys_updated_on>
    </sys_script_include>
</record_update>
