<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script><![CDATA[/* global pageConfig, angular, window, console, XMLHttpRequest, GlideAjax, GlideModal, Uint8Array, Response, Blob, DecompressionStream, URL, $ */
/* eslint no-undef: "error" */
// emulate GlideStringUtil.escapeHTML which won't work in the HTML field
pageConfig = JSON.parse(pageConfig.replace(/&quot;/g, '"').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&'));

var app = angular.module('mplcSource', []);
app.controller('repoController', function ($window, $scope, $q) {
    $scope.repos = $window.pageConfig.repos;
	$scope.repos.forEach(function (repo) {
		configureActions(repo);
		configureLogo(repo);
	});
	
	$scope.filterRepos = function (repo) {
		var searchString = ($scope.searchString || '').trim().toLowerCase();
		if (searchString) {
			if (JSON.stringify(repo).toLowerCase().includes(searchString)) {
				return true;
			}
			
			return false;
		}
		
		return true;
	};
	
	function configureActions(repo) {
		repo.actions = [];
		
		// todo rework this, the actions need to be state aware, otherwise
		// the "install" button will still remain visible after installation...
		// (refreshing the whole window after installation to refresh the buttons is overkill)
		var repoState = repo.status.state.value;
		if (repoState == 'update_available') {
			repo.actions.push({
				label: 'Update',
				click: function () {
					var self = this;
					self.disabled = true;
					update(repo)
						.then(function () {

						}, function (msg) {

						})
						['finally'](function () {
							self.disabled = false;
						});
				}
			});
		} else if (repoState == 'not_installed') {
			repo.actions.push({
				label: 'Install',
				click: function () {
					var self = this;
					self.disabled = true;
					install(repo)
					['finally'](function () {
						self.disabled = false;
					});
				},
				disabled: !pageConfig.can_install
			});
		}
		
		if (repoState == 'update_available' || repoState == 'installed') {
			repo.actions.push({
				label: 'Verify',
				click: function () {
					
				}
			});
		}
	}
	
	function install(repo) {
		var deferred = $q.defer();
		
		var ga = new GlideAjax('x_376096_mplc.MPLCUtilClient');
		ga.addParam('sysparm_name', 'prepareGitApp');
		ga.addParam('alias', $window.pageConfig.source.sys_id);
		ga.addParam('repo', JSON.stringify({
			url: repo.git.url,
			forks_url: repo.git.forks_url,
			clone_url: repo.git.clone_url
		}));
		ga.getXMLAnswer(function (result) {
			result = JSON.parse(result);
			if (result.status == 'success') {
				var dd = new GlideModal('hierarchical_progress_viewer', false, '40em', '10em');
				dd.setTitle('Fork Status');
				dd.setPreference('sysparm_renderer_execution_id', result.execution_id);
				dd.on('executionComplete', function (res) {
					if (!res.result) {
						deferred.reject('Failed to Prepare GitHub Repo');
						return;
					}
					
					var req = new XMLHttpRequest();
					req.open('POST', 'api/sn_cicd/sc/import'
						+ '?repo_url=' + encodeURIComponent(res.result.repo_url)
						+ '&branch_name=' + encodeURIComponent(res.result.branch_name)
						+ '&credential_sys_id=' + res.result.credential_sys_id
					);
					req.setRequestHeader('X-UserToken', window.g_ck);
					req.setRequestHeader('Accept', 'application/json');
					req.onload = function() {
						var response = JSON.parse(this.response);
						if (response.result) {
							dd.destroy();

							dd = new GlideModal('hierarchical_progress_viewer', false, '40em', '10em');
							dd.setTitle('Import Status');
							dd.setPreference('sysparm_renderer_execution_id', response.result.links.progress.id);
							dd.on('executionComplete', function (res) {
								if (res.state == 2) {
									deferred.resolve();
								} else {
									var errorMessage = (res.result && res.result['error.message']) || 'Unknown Error occurred';
									deferred.reject(errorMessage);
								}
							});
							dd.render();
						} else {
							deferred.reject('Failed to install app: ' + this.response);
						}
					};

					req.send();
				});
				dd.render();
			} else if (result.message) {
				deferred.reject(result.message);
			}
		});
		
		return deferred.promise;
	}
	
	function update(repo) {
		var deferred = $q.defer();
		var req = new XMLHttpRequest();
		req.open('POST', 'api/sn_cicd/sc/apply_changes'
			+ '?app_sys_id=' + repo.app.sys_id
			+ '&branch_name=' + encodeURIComponent(repo.repo_config.current_branch)
		);
		req.setRequestHeader('X-UserToken', window.g_ck);
		req.setRequestHeader('Accept', 'application/json');
		req.onload = function() {
			var response = JSON.parse(this.response);
			if (response.result) {
				var dd = new GlideModal('hierarchical_progress_viewer', false, '40em', '10em');
				dd.setTitle('Import Status');
				dd.setPreference('sysparm_renderer_execution_id', response.result.links.progress.id);
				dd.on('executionComplete', function (res) {
					deferred.resolve();
				});
				dd.render();
			} else {
				deferred.reject('Update app failed: ' + this.response);
			}
		};

		req.send();
		return deferred.promise;
	}
	
	function verify(repo) {
		var ga = new GlideAjax('x_376096_mpl.MPLUtilClient');
		ga.addParam('sysparm_name', 'verifyGitRepo');
		ga.addParam('alias', $window.pageConfig.source);
		ga.addParam('repo', JSON.stringify(repo));
		ga.getXMLAnswer(function (result) {
			result = JSON.parse(result);
			if (result.status == 'success') {
				var dd = new GlideModal('hierarchical_progress_viewer', false, '40em', '10em');
				dd.setTitle(getMessage('Status'));
				dd.setPreference('sysparm_renderer_execution_id', result.tracker_id);
				dd.on('executionComplete', function () {
					// g_navigation.reloadWindow();
				});
				dd.render();
			} else if (result.message) {
				console.error(result.message);
			}
		});
	}
	
	function configureLogo(repo) {
		if (repo.app.logo) {
			var content = new Blob(repo.app.logo.content_base64.map(function (b) {
				return Uint8Array.from(window.atob(b), function (m) {
					return m.codePointAt(0);
				});
			}), { type: repo.app.logo.content_type });
			
			if (repo.app.logo.compressed) {
				new Response(
					content
					.stream()
					.pipeThrough(new DecompressionStream('gzip'))
				).blob().then(function (blob) {
					// the response-blob does not have the attachment's content type
					setSrcFromBlob(repo, new Blob([blob], { type: repo.app.logo.content_type }));
				});
			} else {
				setSrcFromBlob(repo, content);
			}
		}
		
		function setSrcFromBlob(repo, blob) {
			$scope.$apply(function () {
				repo.app.logo.src = URL.createObjectURL(blob);
			});
		}
	}
});

angular.bootstrap($('mplcSource'), ['mplcSource']);]]></client_script>
        <description/>
        <direct>false</direct>
        <endpoint>x_376096_mplc_source.do</endpoint>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
	<script src="/scripts/angular_includes_no_min.1.5.11.js"></script>
	<g:evaluate>
		const pageConfig = {
			source: {
				sys_id: RP.getParameterValue('source_id')
			},
			repos: []
		};
		
		if (pageConfig.source) {
			const aliasGr = new GlideRecordSecure('sys_alias');
			aliasGr.addQuery('sys_id', pageConfig.source.sys_id);
			aliasGr.setLimit(1);
			aliasGr.query();
			if (aliasGr.next()) {
				const provider = new sn_cc.ConnectionInfoProvider();
				const conn = provider.getConnectionInfo(aliasGr.sys_id);
				if (conn) {
					pageConfig.source.name = conn.getAttribute('name');

					const mplcUtil = new x_376096_mplc.MPLCUtil();
					const result = mplcUtil.getGitRepos(aliasGr.sys_id);
					if (result.status == 'success') {
						pageConfig.repos = result.repositories;
						pageConfig.can_install = result.can_install;
					}
				}
			}
		}
	</g:evaluate>
	<script>var pageConfig = '${JSON.stringify(pageConfig)}';</script>
	<style>
		.app-header {
			display: flex;
			padding: .75rem 1.25rem;
			background-color: rgba(0, 0, 0, .03);
			border-bottom: 1px solid rgba(0, 0, 0, .125);
		}
		
		.app-logo {
			margin-right: 1rem;
			border: thin solid lightgrey;
			border-radius: .4rem;
			width: 4rem;
			height: 4rem;
		}
		
		.app-logo img {
			padding: .2rem;
			max-width: 100%;
			max-height: 100%;
		}
		
		.app-logo i {
			font-size: 2.5rem;
			width: 2.5rem;
			color: grey;
			display: block;
			margin-left: .75rem;
			margin-right: .75rem;
		}
		
		.app-title {
			display: grid;
			font-size: 2rem;
		}
		
		.app-subtitle {
			font-size: 1.2rem;
		}
		
		.app-description {
			font-size: 1.5rem;
			white-space: pre-line;
		}
		
		.app-details {
			padding: 1.25rem;
			font-size: 1.2rem;
		}
		
		.app-details ul {
			padding-top: .5rem;
		}
		
		.app-content {
			width: calc(100% - 10rem); /* 10rem = width of app-actions */
			border: thin solid darkgrey;
			border-radius: .5rem 0 0 .5rem;
			border-right: none;
		}
		
		.app-actions {
			z-index: 1;
			position: absolute;
			top: 0;
			right: 15px; /* 15px = padding of (parent) column */
			width: 10rem;
			height: 100%;
		
			border: thin solid darkgrey;
			border-radius: 0 .5rem .5rem 0;
			border-left: thin solid lightgrey;
			padding-top: .75rem;
		}
		
		.app-actions ul {
			list-style: none;
			padding: 0 .5rem 0 .5rem;
		}
		
		.app-actions li {
			padding-bottom: .5rem;
		}
		
		.app-actions button {
			padding: 6px 12px;
			width: 100%;
		}
		
		.app {
			margin-top: 1rem;
			marin-bottom: 1rem;
		}
		
		.source-header {
			position: fixed;
			border-bottom: thin solid black;
			width: 100%;
			min-height: 3.5rem;
			z-index: 1000;
			background: white;
			margin-top: -5px;
		}
		
		.source-header h5 {
			margin-left: 1rem;
		}
		
		.source-header input[type="search"] {
			margin: .5rem;
			width: 30rem;
		}
		
		.source-apps {
			padding-top: 3rem;
		}
	</style>
	<div id="mplcSource" ng-controller="repoController">
		<div class="source-header container">
			<div class="row">
				<h5 class="col-md-8">Available applications for GitHub Repository Source ${pageConfig.source.name}</h5>
				<input class="col-md-4 form-control" type="search" placeholder="Search" aria-label="Search" ng-model="searchString" />
			</div>
		</div>
		<div class="source-apps container">
			<div class="row">
				<div class="col col-lg-12 app" ng-repeat="repo in repos | filter:filterRepos">
					<div class="app-content">
						<div class="app-header">
							<div class="app-logo">
								<img ng-if="repo.app.logo" ng-src="{{repo.app.logo.src}}"></img>
								<i ng-if="!repo.app.logo" class="icon icon-application-generic"></i>
							</div>
							<span class="app-title">
								{{::repo.app.name}}
								<a class="app-subtitle" ng-if="repo.git.has_wiki" target="_blank" href="{{::repo.git.html_url}}/wiki">Wiki ➚</a>
							</span>
						</div>
						<div class="app-details">
							<span class="app-description">{{::repo.app.short_description}}</span>
							<ul>
								<li>Version: {{::repo.app.version}}</li>
								<li>Created on: {{::repo.app.created}}</li>
								<li>Modified on: {{::repo.app.updated}}</li>
								<li>State: {{::repo.status.state.label}}<span ng-if="repo.status.message">$[SP]({{::repo.status.message}})</span></li>
							</ul>
						</div>
					</div>
					<div class="app-actions">
						<ul>
							<li ng-repeat="action in repo.actions">
								<button ng-click="action.click()" ng-disabled="action.disabled">{{::action.label}}</button>
							</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</div>
</j:jelly>]]></html>
        <name>source</name>
        <processing_script/>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-01-22 19:54:34</sys_created_on>
        <sys_id>c615bfcf97b3f5503c2d3f56f053afbd</sys_id>
        <sys_mod_count>145</sys_mod_count>
        <sys_name>source</sys_name>
        <sys_package display_value="Marketplace Client" source="x_376096_mplc">2fe28b4497bf39103c2d3f56f053af4e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Marketplace Client">2fe28b4497bf39103c2d3f56f053af4e</sys_scope>
        <sys_update_name>sys_ui_page_c615bfcf97b3f5503c2d3f56f053afbd</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-05-23 18:59:51</sys_updated_on>
    </sys_ui_page>
</record_update>
