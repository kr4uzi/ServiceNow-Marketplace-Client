<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_376096_mplc.MPLCExt</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Implements extension point x_376096_mplc.MPLCExt</description>
        <name>MPLCExt</name>
        <script><![CDATA[/* global Class, GlideRecord, GlideScopedEvaluator */
/* eslint no-undef: "error" */
var MPLCExt = Class.create();
MPLCExt.prototype = {
	initialize: function () {
		const scriptGr = new GlideRecord('sys_rte_eb_script_operation');
		scriptGr.addQuery('sys_id', '26659daf97fb39503c2d3f56f053af90');
		scriptGr.setLimit(1);
		scriptGr.query();
		if (scriptGr.next()) {
			this.scriptGr = scriptGr;
		} else {
			throw new Error(`${this.type} requires injectable script record`);
		}
	},

	/**
	 * @param {number} ms - milliseconds
	 */
	sleep: function (ms) {
		this.scriptGr.sys_scope = 'global';
		this.scriptGr.script = 'gs.sleep(ms)';
		new GlideScopedEvaluator().evaluateScript(this.scriptGr, 'script', {
			ms: ms
		});
	},

	/**
	 * updates an attachment with the supplied parameters
	 * @param {string} attSysID - the Sys ID of the attachment that should be updated
	 * @param {Object} values
	 * @return {boolean} success of the operation
	 */
	updateAttachment: function (attSysID, values) {
		const allowedUpdateFields = ['table_name', 'table_sys_id', 'file_name', 'content_type'];
		for (const attr in values) {
			if (!allowedUpdateFields.includes(attr)) {
				return false;
			}
		}

		this.scriptGr.sys_scope = 'global';
		this.scriptGr.script = `(function (attSysID, values) {
			var attGr = new GlideRecord('sys_attachment');
			attGr.addQuery('sys_id', attSysID);
			attGr.setLimit(1);
			attGr.query();
			if (attGr.next()) {
				for (var attr in values) {
					attGr.setValue(attr, values[attr]);
				}

				return attGr.update() != null;
			}
		})(attSysID, JSON.parse(values))`;

		return new GlideScopedEvaluator().evaluateScript(this.scriptGr, 'script', {
			attSysID: attSysID,
			values: JSON.stringify(values)
		});
	},

	type: 'MPLCExt'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>markus.kraus</sys_created_by>
        <sys_created_on>2024-08-09 20:08:55</sys_created_on>
        <sys_id>64a87def93778210e02873718bba1018</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>MPLCExt</sys_name>
        <sys_package display_value="Marketplace Client" source="x_376096_mplc">2fe28b4497bf39103c2d3f56f053af4e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Marketplace Client">2fe28b4497bf39103c2d3f56f053af4e</sys_scope>
        <sys_update_name>sys_script_include_64a87def93778210e02873718bba1018</sys_update_name>
        <sys_updated_by>markus.kraus</sys_updated_by>
        <sys_updated_on>2024-08-10 09:10:46</sys_updated_on>
    </sys_script_include>
</record_update>
